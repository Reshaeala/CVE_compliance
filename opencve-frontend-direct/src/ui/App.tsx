import React, {
  useEffect,
  useMemo,
  useRef,
  useState,
  useCallback,
} from "react";

/** --- Types --- */
type CVEItem = {
  cve_id: string;
  title: string;
  summary: string;
  published_at: string | null;
  updated_at: string | null;
  cvss: number | null;
  url_opencve: string | null;
  url_nvd: string | null;
};

type BackendPage = {
  items?: any[];
  results?: any[]; // allow both shapes
  total?: number;
};

/** --- Env (Vite) --- */
const BASE_URL = "http://localhost:3000"; // <-- match your proxy port

/** Fetch one page from /cve (backend proxy) */
async function fetchVendorPage(vendor: string, page = 1): Promise<BackendPage> {
  const url = new URL(`${BASE_URL}/cve`);
  url.searchParams.set("vendor", vendor);
  url.searchParams.set("page", String(page));

  const res = await fetch(url.toString(), {
    headers: { accept: "application/json" },
  });

  if (!res.ok) {
    const txt = await res.text().catch(() => "");
    throw new Error(`Backend error ${res.status}: ${txt.slice(0, 200)}`);
  }

  return res.json();
}

/** Fetch multiple pages and normalize */
async function fetchVendorCVEsAll(
  vendor: string,
  maxPages = 5
): Promise<CVEItem[]> {
  const all: any[] = [];
  let page = 1;

  while (page <= maxPages) {
    const data = await fetchVendorPage(vendor, page);
    const items = data.items ?? data.results ?? [];
    if (!items.length) break;

    all.push(...items);

    const total = Number(data.total ?? all.length);
    if (all.length >= total) break;

    page += 1;
  }

  // Normalize into CVEItem[]
  const normalized: CVEItem[] = all.map((v) => {
    const cve = v.cve_id || v.id || v.cve || "";
    const title = v.title || v.summary || v.description || "";
    const summary = v.summary || v.description || "";
    const published =
      v.published_at || v.published || v.created_at || v.date || null;
    const updated = v.updated_at || null;
    const score =
      Number(v?.cvss?.score ?? v?.cvss ?? v?.cvssv3?.score ?? NaN) || null;

    return {
      cve_id: cve,
      title,
      summary,
      published_at: published,
      updated_at: updated,
      cvss: score,
      url_opencve: cve ? `https://app.opencve.io/cve/${cve}` : null,
      url_nvd: cve ? `https://nvd.nist.gov/vuln/detail/${cve}` : null,
    };
  });

  // Dedupe by CVE ID and sort newest first
  const seen = new Set<string>();
  const dedup = normalized.filter(
    (x) => x.cve_id && !seen.has(x.cve_id) && seen.add(x.cve_id)
  );
  dedup.sort((a, b) =>
    String(b.published_at ?? "").localeCompare(String(a.published_at ?? ""))
  );
  return dedup;
}

/** --- Component --- */
export default function App() {
  const [vendor, setVendor] = useState("");
  const [cves, setCves] = useState<CVEItem[]>([]);
  const [loading, setLoading] = useState(false);
  const [err, setErr] = useState<string | null>(null);

  // keep a ref to cancel stale requests
  const abortRef = useRef<AbortController | null>(null);

  const disabled = useMemo(() => loading || !vendor.trim(), [loading, vendor]);

  const fetchData = useCallback(async () => {
    // cancel any in-flight request
    if (abortRef.current) abortRef.current.abort();
    const ac = new AbortController();
    abortRef.current = ac;

    try {
      setErr(null);
      setLoading(true);
      const data = await fetchVendorCVEsAll(vendor, 5);
      if (ac.signal.aborted) return; // ignore if a newer request started
      setCves(data);
    } catch (e: any) {
      if (e?.name === "AbortError") return;
      setErr(e?.message || "Unknown error");
      setCves([]);
    } finally {
      if (!ac.signal.aborted) setLoading(false);
    }
  }, [vendor]);

  // Optional: auto fetch on first mount
  useEffect(() => {
    fetchData();
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []);

  return (
    <div
      style={{
        padding: 20,
        fontFamily: "system-ui, -apple-system, Segoe UI, Roboto, Arial",
      }}
    >
      <h1 style={{ margin: "0 0 12px" }}>Vendor CVEs</h1>

      <div
        style={{
          marginBottom: 16,
          display: "flex",
          gap: 8,
          alignItems: "center",
          flexWrap: "wrap",
        }}
      >
        <input
          value={vendor}
          onChange={(e) => setVendor(e.target.value)}
          placeholder="Enter vendor (e.g., microsoft, cisco, adobe)"
          style={{ padding: 10, fontSize: 16, width: 320 }}
          onKeyDown={(e) => e.key === "Enter" && fetchData()}
        />
        <button
          onClick={fetchData}
          disabled={disabled}
          style={{
            padding: "10px 16px",
            fontSize: 16,
            backgroundColor: disabled ? "#9aa7e0" : "#2563eb",
            color: "#fff",
            border: "1px solid #1e40af",
            borderRadius: 8,
            cursor: disabled ? "not-allowed" : "pointer",
          }}
        >
          {loading ? "Loading…" : "Fetch CVEs"}
        </button>
        <span style={{ color: "#666" }}>{cves.length} results</span>
      </div>

      {err && (
        <div
          style={{
            color: "#7f1d1d",
            background: "#fee2e2",
            border: "1px solid #fecaca",
            borderRadius: 8,
            padding: 10,
            marginBottom: 12,
          }}
        >
          <strong>Error:</strong> {err}
        </div>
      )}

      {cves.length > 0 && (
        <ul style={{ listStyle: "none", padding: 0, margin: 0 }}>
          {cves.map((cve) => (
            <li
              key={cve.cve_id}
              style={{
                border: "1px solid #e5e7eb",
                borderRadius: 10,
                padding: 12,
                marginBottom: 10,
                background: "#fff",
                boxShadow: "0 1px 2px rgba(0,0,0,0.04)",
              }}
            >
              <div
                style={{
                  display: "flex",
                  justifyContent: "space-between",
                  gap: 12,
                }}
              >
                <div>
                  <a
                    href={cve.url_opencve || "#"}
                    target="_blank"
                    rel="noreferrer"
                    style={{
                      fontWeight: 700,
                      color: "#1d4ed8",
                      textDecoration: "none",
                    }}
                  >
                    {cve.cve_id}
                  </a>{" "}
                  <span
                    style={{
                      padding: "2px 6px",
                      borderRadius: 6,
                      background: "#eef2ff",
                      fontSize: 12,
                      fontWeight: 600,
                    }}
                  >
                    {cve.cvss != null ? `CVSS ${cve.cvss}` : "No CVSS"}
                  </span>
                </div>
                <div style={{ color: "#555" }}>
                  {cve.published_at
                    ? new Date(cve.published_at).toLocaleString()
                    : ""}
                </div>
              </div>

              <div style={{ marginTop: 6, fontWeight: 600 }}>
                {cve.title || "(no title provided)"}
              </div>
              {cve.summary && (
                <div style={{ marginTop: 4, color: "#333" }}>
                  {cve.summary.length > 420
                    ? cve.summary.slice(0, 420) + "…"
                    : cve.summary}
                </div>
              )}

              <div style={{ marginTop: 8, color: "#666", fontSize: 13 }}>
                {cve.url_nvd && (
                  <>
                    <a href={cve.url_nvd} target="_blank" rel="noreferrer">
                      NVD
                    </a>
                    {" · "}
                  </>
                )}
                {cve.url_opencve && (
                  <a href={cve.url_opencve} target="_blank" rel="noreferrer">
                    OpenCVE
                  </a>
                )}
              </div>
            </li>
          ))}
        </ul>
      )}

      {cves.length === 0 && !loading && !err && (
        <p>No CVEs found for this vendor.</p>
      )}
    </div>
  );
}
